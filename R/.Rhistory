hist
hist
mean
var.p
## 사용자 정의 함수
var.p <- function(x,y,z){
n <- length(x)
m <- mean(x)
num <- sum((x-m)^2)
denom <- n
var <- num / denom
return (var)
}
var.p
var.p(cor1)
var.p(cor1)
source('~/Desktop/MultiCampus/R/180703.R')
source('~/Desktop/MultiCampus/R/180703.R')
source('~/Desktop/MultiCampus/R/180703.R')
source('~/Desktop/MultiCampus/R/180703.R')
source('~/Desktop/MultiCampus/R/180703.R')
source('~/Desktop/MultiCampus/R/180703.R')
quantile(mtcars$mpg)
# install.packages('rJava')
# dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
# Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home')
Sys.setlocale("LC_ALL", "ko_KR.UTF-8")
quantile(mtcars$mpg)
source('~/Desktop/MultiCampus/R/180703.R')
source('~/Desktop/MultiCampus/R/180703.R')
source('~/Desktop/MultiCampus/R/180703.R')
quantile(mtcars$mpg)
Sys.setlocale("LC_ALL", "ko_KR.UTF-8")
myvars <- c("")
mtcars
# install.packages('rJava')
# dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
# Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home')
Sys.setlocale("LC_ALL", "ko_KR.UTF-8")
quantile(mtcars$mpg)
myvars <- c("")
mtcars
x <- c(0,1,2)
px <- c(1/4, 1/2, 1/4)
Ex <- sum(x * px)
Var <- sum(x^2 * px) - Ex^2
# 이항 분포
b <- 6
p <- 1/3
n <- 6
x <- 0:n
px <- dbinom(x = x,
size = n,
prob = p
)
px
### n이하를 더해준다.
### 누적 분포함수
px <- pbinom(q = x,
size = n,
prob = p
)
px
px <- qbinom(p = 0.50,
size = n,
prob = p
)
px
?qbinom
### n이하를 더해준다.
### 누적 분포함수
?pbinom
### n이하를 더해준다.
### 누적 분포함수
?pbinom
plot(x, px, typ='height')
px
plot(x, px, typ='height')
px <- qbinom(p = 0.50,
size = n,
prob = p
)
px
plot(x, px, typ='height')
plot(x, px, typ='height')
px <- pbinom(q = x,
size = n,
prob = p
)
px
plot(x, px, typ='height')
plot(x, px, typ='height')
px <- dbinom(x = x,
size = n,
prob = p
)
plot(x, px, typ='height')
px
px
plot(x, px, typ='height')
?qbinom
px <- qbinom(p = 0.50,
size = n,
prob = p
)
px
# random 이항분포
px <- rbinom(
n = 10,
size = 100,
prob = p
)
plot(px , type='h')
b1 <- dbinom(x = 0:5,
size=5,
prob= 2/3)
b1
plot(b1)
plot(b1, type= 'height')
b1 <- dbinom(x = 0:5,
size=5,
prob= 2/3)
b1
plot(b1, type= 'height')
b1 <- dbinom(x = 0:5,
size=5,
prob= 2/3)
b1
plot(b1, type= 'height')
plot(b1, type='height')
plot(b1, typ='height')
b1 <- dbinom(x = 0:5,
size=5,
prob= 2/3)
b1
plot(b1, typ='height')
b1
b1 <- dbinom(x = 0:5,
size=5,
prob= 2/3)
b1
plot(b1, typ='height')
plot(b1, typ='h')
plot(b1)
b1
plot(b1)
b1 <- dbinom(x = 0:15,
size=15,
prob= 2/3)
b1
plot(b1)
b2 <- dbinom(x = 0:30,
size=30,
prob= 2/3)
b2
plot(b2)
b3 <- dbinom(x = 0:60,
size=60,
prob= 2/3)
b3
plot(b3)
b4 <- dbinom(x = 0:6000,
size=6000,
prob= 2/3)
b4
plot(b4, xlim = c(0,6000),
col='red',
type='l')
lines(b1, col = 'blue')
?dnorm
## 0.25를 갖게 해주는 값을 찾아준다.
qnorm(p = .25,
mean = mu,
sd = 5)
## random extraction
rx <- rnorm(n = 3000,
mean = mu,
s = 10000)
rx <- sort(rx, decreasing = F)
plot(rx)
## 0.25를 갖게 해주는 값을 찾아준다.
qnorm(p = .25,
mean = mu,
sd = 5)
r.n = rnorm(10)
r.n
sum_ini
ma <- matrix(1:12 , nrow = 3)
for (i in 2:9) {
for (j in 1:9) {
# print(sprintf("%d ",j*i))
cat (i*j," ")
}
cat("\n")
}
### 정규분포를 이용한 표본 집단에대한 평균과 분산
m10 <- rep(NA, 1000)
cor1 = c(234, 234, 234, 233, 233,
233, 233, 231, 232, 231)
cor2 = c(146.3, 146.4, 144.1, 146.7,
145.2, 144.1, 143.3, 147.3,
146.7, 147.3)
par(mfrow=c(1,3))
hist(b.2.mean)
hist(b.4.mean)
hist(b.32.mean)
cor1 = c(234, 234, 234, 233, 233,
233, 233, 231, 232, 231)
cor2 = c(146.3, 146.4, 144.1, 146.7,
145.2, 144.1, 143.3, 147.3,
146.7, 147.3)
## 사용자 정의 함수
# 모집단에대한 분산
var.p <- function(x,y,z){
n <- length(x)
m <- mean(x)
num <- sum((x-m)^2)
denom <- n
var <- num / denom  # E(x)^2 / n
return (var)
}
var.p(cor1)
var.p(cor1)
source('~/Desktop/MultiCampus/R/180703.R')
Sys.setlocale("LC_ALL", "ko_KR.UTF-8")
quantile(mtcars$mpg)
mtcars
x <- c(0,1,2)
px <- c(1/4, 1/2, 1/4)
Ex <- sum(x * px)
Var <- sum(x^2 * px) - Ex^2
sum(x^2)
sum(x)
Var
# 이항 분포
b <- 6
p <- 1/3
n <- 6
x <- 0:n
px <- dbinom(x = x,
size = n,
prob = p
)
plot(x, px, typ='height')
px
### n이하를 더해준다.
### 누적 분포함수
?pbinom
px <- pbinom(q = x,
size = n,
prob = p
)
px
plot(x, px, typ='height')
?qbinom
px <- qbinom(p = 0.50,
size = n,
prob = p
)
px
# random 이항분포
px <- rbinom(
n = 10,
size = 100,
prob = p
)
plot(px , type='h')
b1 <- dbinom(x = 0:5,
size=5,
prob= 2/3)
b1
plot(b1)
b1 <- dbinom(x = 0:15,
size=15,
prob= 2/3)
b1
plot(b1)
b2 <- dbinom(x = 0:30,
size=30,
prob= 2/3)
b2
plot(b2)
b3 <- dbinom(x = 0:60,
size=60,
prob= 2/3)
b3
plot(b3)
b4 <- dbinom(x = 0:6000,
size=6000,
prob= 2/3)
b4
plot(b4, xlim = c(0,6000),
col='red',
type='l')
?dnorm
mu <- 170 # 평균
sigma <- 6 # 표준편차
ll <- mu - 3*sigma
up <- mu + 3*sigma
x <- seq(ll, up, by = 0.01)
nd <- dnorm(x, mean=mu,
sd = sigma)
plot(nd)
px <- pnorm(q = 182,
mean = mu,
sd = 7)
px
## 0.25를 갖게 해주는 값을 찾아준다.
qnorm(p = .25,
mean = mu,
sd = 5)
## random extraction
rx <- rnorm(n = 3000,
mean = mu,
s = 10000)
rx <- sort(rx, decreasing = F)
plot(rx)
options(digits = 13)
set.seed(1234)
## random extraction
rx <- rnorm(n = 3000,
mean = mu,
s = 10000)
# rx <- sort(rx, decreasing = F)
plot(rx)
## random extraction
rx <- rnorm(n = 30,
mean = mu,
s = 100)
# rx <- sort(rx, decreasing = F)
plot(rx)
options(digits = 13)
set.seed(1234)
qnorm(p = 0.1,
mean = 0,
sd = 10)
qnorm(p = 0.1,
mean = 0,
sd = 10)
?qnorm
qnorm(p = 0.1,
mean = 0,
sd = 10)
r.n = rnorm(10)
r.n
sum_ini <- 0
# random 정규분포
r.n = rnorm(10)
r.n
# random 정규분포 추출
r.n = rnorm(10)
r.n
sum_ini <- 0
sum_ini
for(i in r.n)
{
sum_ini = sum_ini + i
}
sum_ini
ma <- matrix(1:12 , nrow = 3)
for (i in 2:9) {
for (j in 1:9) {
# print(sprintf("%d ",j*i))
cat (i*j," ")
}
cat("\n")
}
### 정규분포를 이용한 표본 집단에대한 평균과 분산
m10 <- rep(NA, 1000)
### 정규분포를 이용한 표본 집단에대한 평균과 분산
m10 <- rep(NA, 1000)
m40 <- rep(NA, 1000)
for(i in 1:1000)
{
m10[i] <- mean(rnorm(1))
m40[i] <- mean(rnorm(30))
}
options(digits = 4)
cat("m10 평균 : " , mean(m10), "표준편차 : ", sd(m10))
cat("m40 평균 : " , mean(m40), "표준편차 : ", sd(m40))
m10
m40
par(mfrow=c(1,1))
hist(m10, xlim= c(-1.5,1.5))
hist(m40, xlim= c(-1.5,1.5))
n <- 1000
r.1.mean <- rep(NA, n)
r.2.mean <- rep(NA, n)
for(i in 1:1000){
r.1.mean[i] = mean(rnorm(4, mean=3, sd=1))
r.2.mean[i] = mean(rnorm(4, mean=170 , sd=1))
# r.1.sd = sd(rnorm(4, mean=3, sd=1))
# r.2.sd = sd(rnorm(4, mean=170 , sd=6))
}
sd(r.1.mean)
sd(r.2.mean)
mean(r.1.mean)
mean(r.2.mean)
hist(r.1.mean, freq = F,
col = "red")
hist(r.2.mean, freq = F,
col = "orange")
r.1.sd
r.2.sd
hist(r.1.mean, freq = F,
col = "red")
x1 <- seq(min(r.1.mean),
max(r.1.mean),
length =1000)
x1
y1 <- dnorm(x = x1,
mean = 3,
sd=(1/sqrt(4)))
lines(x1, y1, lty = 2, lwd = 2, col = "blue")
hist(r.2.mean, freq = F,
col = "red")
x1 <- seq(min(r.2.mean),
max(r.2.mean),
length =1000)
x1
y1 <- dnorm(x = x1,
mean = 170,
sd=(6/sqrt(4)))
lines(x1, y1, lty = 2, lwd = 2, col = "blue")
## 정규분포가 아닌 경우
## 표본 평균의 분포
set.seed(10)
## 정규분포가 아닌 경우
## 표본 평균의 분포
set.seed(10)
t <- 10
p <- 0.1
x <- 0:10
n <- 1000
b.2.mean <- rep(NA, n)
b.4.mean <- rep(NA, n)
b.32.mean <- rep(NA, n)
for (i in 1:n) {
b.2.mean[i] <- mean(rbinom(2,size = t,
prob = p
))
b.4.mean[i] <- mean(rbinom(4,size = t,
prob = p
))
b.32.mean[i] <- mean(rbinom(32,size = t,
prob = p
))
}
b.2.mean
b.4.mean
b.32.mean
par(mfrow=c(1,3))
hist(b.2.mean)
hist(b.4.mean)
hist(b.32.mean)
cor1 = c(234, 234, 234, 233, 233,
233, 233, 231, 232, 231)
cor2 = c(146.3, 146.4, 144.1, 146.7,
145.2, 144.1, 143.3, 147.3,
146.7, 147.3)
# 함수로 구현!!
var.p <- function(x,y,z){
n <- length(x)
m <- mean(x)
num <- sum((x-m)^2)
denom <- n
var <- num / denom  # E(x)^2 / n
return (var)
}
var.p(cor1)
source('~/Desktop/MultiCampus/R/180703.R')
mean.seq <- function(x){
n <- length(x)
n2 <- 0
sum <- 0
# 길이 만큼 반복
for (i in 1:n) {
newx <- i*x[i]
sum <- sum + newx # 1*x1 + 2*x2 + 3*x3 .... (분모)
n2 <- n2 + i # 1 + 2 + 3 + 4 .... (분자)
}
return (sum / n2)
}
# value init
n <- 1000
y1 <- rep(NA, n)
y2 <- rep(NA, n)
# y1[] : sample 평균
# y2[] :
for (i in 1:n) {
smp <- rnorm(3) # 3개의 랜덤 샘플
y1[i] <- mean(smp) # 표본 평균
y2[i] <- mean.seq(smp)
}
# -0.1 ~ 0.1 extraction을 n1,n2에 대입
n1 <- length(y1[(y1 > -0.1) & (y1 < 0.1) ])
n2 <- length(y2[(y2 > -0.1) & (y2 < 0.1) ])
n1
n2
y1
y2
var(y1)
# 평균,
data.frame(mean = mean(y1), # y1의 평균
var = var(y1),   # y1의 분산
n = n1)          # -0.1~0.1
data.frame(mean = mean(y2),
var = var(y2),
n = n2)
smp <- rnorm(3) # 3개의 랜덤 샘플
?seq()
?apply
